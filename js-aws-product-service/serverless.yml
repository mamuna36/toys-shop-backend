service: product-service

frameworkVersion: '3'
plugins:
  - serverless-offline
useDotenv: true
provider:
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:*'
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-products-${sls:stage}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-stocks-${sls:stage}
        - Effect: 'Allow'
          Action: 'sqs:*'
          Resource:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
        - Effect: 'Allow'
          Action: 'sns:*'
          Resource: !Ref 'CreateProductTopic'

  name: aws
  runtime: nodejs12.x
  environment:
    DYNAMODB_PRODUCTS_TABLE: ${self:service}-products-${sls:stage}
    DYNAMODB_STOCKS_TABLE: ${self:service}-stocks-${sls:stage}
    CREATE_PRODUCT_SNS_TOPIC_ARN: !Ref 'CreateProductTopic'

  # you can overwrite defaults here
  stage: dev
  region: us-east-1


functions:
  getProductsList:
    handler: src/functions/Products/getProductsList/handler.getProducts
    events:
      - http:
          path: products
          method: get
          cors: true
  createProduct:
    handler: src/functions/Products/createProduct/handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
  getProductById:
    handler: src/functions/Products/getProductById/handler.getProductById
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
  catalogBatchProcess:
    handler: src/functions/Products/catalogBatchProcess.handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
  

resources:
  Outputs: 
    CatalogItemsQueueArn:
      Value:
        Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
      Description: 'SQS will be used by other stacks'
      Export: 
        Name: '${self:service}-${self:provider.stage}-CatalogItemsQueueArn'
        
      
    CatalogItemsQueueUrl: 
        Value: !Ref 'CatalogItemsQueue'
        Description: 'SQS will be used by other stacks'
        Export: 
          Name: '${self:service}-${self:provider.stage}-CatalogItemsQueueUrl'    
  Resources:
    Products:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-products-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    Stocks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-stocks-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: 'catalog-items-queue'
    CreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: 'create-product-topic'
    CreateProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties: 
        Endpoint: ${env:CREATE_PRODUCT_SUBSCRIPTION_EMAIL}
        Protocol: email
        TopicArn: !Ref 'CreateProductTopic'
        # FilterPolicy: 
        #   price: [{ numeric: ['<=', 1000] }]
